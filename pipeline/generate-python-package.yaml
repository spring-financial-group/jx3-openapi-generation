apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  creationTimestamp: null
  name: git-clone-pr
spec:
  stepTemplate:
    env:
      - name: HOME
        value: /tekton/home
    envFrom:
      - secretRef:
          name: jx-boot-job-env-vars
          optional: true
    name: ""
    resources: {}
    workingDir: /workspace/source
  steps:
    - image: ghcr.io/jenkins-x/jx-boot:3.2.197
      name: git-token-export
      resources: {}
      script: |
        #!/usr/bin/env sh
        jx gitops variables
        kubectl get secrets github-config -n jx-staging -o jsonpath={.data.github-token} | base64 -d > /workspace/source/gittoken.gt
    - image: jx3mqubebuild.azurecr.io/spring-financial-group/jx3-openapi-generation:0.0.0-PR-55-2-SNAPSHOT
      name: moves-like-swagger
      resources: {}
      script: |
        #!/usr/bin/env sh
        source /workspace/source/.jx/variables.sh
        apt-get update && apt-get -y install gcc make git gfortran ffmpeg libsm6 libxext6 libopenblas-dev liblapack-dev poppler-utils libgl1-mesa-dev
        pip install datamodel-code-generator
        
        SWAG_PATH=$(find /workspace/source -type f -name "openapi.json")
        if test $SWAG_PATH ; then
          echo Swagger docs found in repository
        else
          echo Swagger docs not found in repository
          exit 1
        fi
        
        gitUrl=https://mqube-bot:"$(cat /workspace/source/gittoken.gt)"@github.com/spring-financial-group/mqube-ml-doc-pipeline-schemas.git
        git clone "$gitUrl"
        cd mqube-ml-doc-pipeline-schemas
        git remote set-url origin "$gitUrl"
        
        echo Generating python package
        datamodel-codegen  --input "$SWAG_PATH" --input-file-type openapi --output "$APP_NAME".py
        
        git add "$serviceName".py
        git commit -m "chore(deps): upgrade $serviceName.py -> v$VERSION"
        git push origin master
        
        rm /workspace/source/gittoken.gt
      workingDir: /workspace/source
  workspaces:
    - description: The git repo will be cloned onto the volume backing this workspace
      mountPath: /workspace
      name: output