apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  creationTimestamp: null
  name: git-clone-pr
spec:
  stepTemplate:
    env:
      - name: HOME
        value: /tekton/home
    envFrom:
      - secretRef:
          name: jx-boot-job-env-vars
          optional: true
    name: ""
    resources: {}
    workingDir: /workspace/source
  steps:
    - image: ghcr.io/jenkins-x/jx-boot:3.2.197
      name: git-token-export-package
      resources: {}
      script: |
        #!/usr/bin/env sh
        jx gitops variables
        kubectl get secrets github-config -n jx-staging -o jsonpath={.data.github-token} | base64 -d > /workspace/source/gittoken.gt
    - image: jx3mqubebuild.azurecr.io/spring-financial-group/python310:latest
      name: python-swagger
      resources: {}
      script: |
        #!/usr/bin/env bash
        source /workspace/source/.jx/variables.sh
        set -e
        
        git config --global --add safe.directory /workspace/source
        git config --global user.name ${GIT_AUTHOR_NAME:-jenkins-x-bot}
        git config --global user.email ${GIT_AUTHOR_EMAIL:-jenkins-x@googlegroups.com}

        curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg \
        && chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg \
        && echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | tee /etc/apt/sources.list.d/github-cli.list > /dev/null \
        && apt update \
        && apt install gh -y

        export GH_TOKEN=$(cat /workspace/source/gittoken.gt)

        pip install --upgrade pip && pip install datamodel-code-generator

        SWAG_PATH=$(find /workspace/source -type f -name "swagger.json")
        OPENAPI_PATH=$(find /workspace/source -type f -name "openapi.json")
        DOC_PATH=https://api-staging.jx.mqube.build/swagger/docs/v1/$SwaggerServiceName
        if test $SWAG_PATH ; then
          echo Swagger docs found in repository
          DOC_PATH=$SWAG_PATH
        elif test $OPENAPI_PATH ; then
          echo OpenAPI docs found in repository
          DOC_PATH=$OPENAPI_PATH
        else
          echo Docs not found in repository, using staging
        fi

        case $DOC_PATH in
            "http"*)
        		echo Downloading spec file
        		curl -k --http1.1 --connect-timeout 30 --retry 300 --retry-delay 5 --retry-connrefused "$DOC_PATH" > ./spec.json	;;
            *)
        		echo Copying spec file
        		cp "$DOC_PATH" ./spec.json ;;
        esac

        gitUrl=https://mqube-bot:"$(cat /workspace/source/gittoken.gt)"@github.com/spring-financial-group/mqube-ml-doc-pipeline-schemas.git
        serviceName=$(echo "$REPO_NAME" | sed 's/\-/_/g' )
        branch=update/"$serviceName"/v"$VERSION"

        git clone "$gitUrl" && cd mqube-ml-doc-pipeline-schemas
        git remote set-url origin "$gitUrl"
        git checkout -b update/"$serviceName"/v"$VERSION"

        echo Generating python package
        mkdir -p "$serviceName"

        datamodel-codegen  --input /workspace/source/spec.json --input-file-type auto --output "$serviceName"/schemas.py
        datamodel-codegen  --input /workspace/source/spec.json --input-file-type auto --output-model-type pydantic_v2.BaseModel --output "$serviceName"/schemas_v2.py
        echo > "$serviceName"/__init__.py

        # Replace Extra.forbid with Extra.ignore
        # if env var EXTRA_FIELD_IGNORE is True
        python3 << HEREDOC
        print('Inside Python HEREDOC')
        import os
        from pathlib import Path
        approach = os.getenv('PY_EXTRA_FIELD_CONFIG', 'ignore')
        valid_approaches = {'allow', 'forbid', 'ignore'}
        assert approach in valid_approaches, f"{approach} not a valid config for python extra fields - select from one of: {valid_approaches}"
        print(f"Extra field config: {approach}")
        path = Path('$serviceName/schemas.py')
        content = path.read_text()
        content = content.replace('extra = Extra.forbid', f'extra = Extra.{approach}')
        path.write_text(content)
        print(f'Change successful')
        HEREDOC

        new_packages_json=`cat packages.json | python3 -c "import sys, json; packages=json.load(sys.stdin); packages['$REPO_NAME']={'dir':'$serviceName','name':'$REPO_NAME','version':'$VERSION'}; print(json.dumps(packages,indent=4))"`
        echo "$new_packages_json" > packages.json

        git add "$serviceName"/schemas.py "$serviceName"/__init__.py packages.json "$serviceName"/schemas_v2.py
        git commit -m "chore(deps): upgrade $serviceName package -> v$VERSION"
        git push --set-upstream origin "$branch"
        gh pr create --title "chore(deps): upgrade $serviceName package -> v$VERSION" --body "Automated python schemas update for $serviceName" --reviewer Reton2 --base master --head "$branch" -l updatebot

        rm /workspace/source/gittoken.gt
      workingDir: /workspace/source
  workspaces:
    - description: The git repo will be cloned onto the volume backing this workspace
      mountPath: /workspace
      name: output
