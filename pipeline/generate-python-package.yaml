apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  creationTimestamp: null
  name: git-clone-pr
spec:
  stepTemplate:
    env:
      - name: HOME
        value: /tekton/home
    envFrom:
      - secretRef:
          name: jx-boot-job-env-vars
          optional: true
    name: ""
    resources: {}
    workingDir: /workspace/source
  steps:
    - image: ghcr.io/jenkins-x/jx-boot:3.2.197
      name: git-token-export-package
      resources: {}
      script: |
        #!/usr/bin/env sh
        jx gitops variables
        kubectl get secrets github-config -n jx-staging -o jsonpath={.data.github-token} | base64 -d > /workspace/source/gittoken.gt
    - image: ghcr.io/spring-financial-group/python38:latest
      name: python-swagger
      resources: {}
      script: |
        #!/usr/bin/env bash
        source /workspace/source/.jx/variables.sh
        set -e 
        
        pip install datamodel-code-generator
        
        SWAG_PATH=$(find /workspace/source -type f -name "openapi.json")
        if test "$SWAG_PATH"; then
          echo openapi.json found in repository
        else
          echo openapi.json not found in repository
          exit
        fi
        
        gitUrl=https://mqube-bot:"$(cat /workspace/source/gittoken.gt)"@github.com/spring-financial-group/mqube-ml-doc-pipeline-schemas.git
        serviceName=$(echo "$REPO_NAME" | sed 's/\-/_/g' )
        testVersion=0.0.1
        
        git clone "$gitUrl" && cd mqube-ml-doc-pipeline-schemas
        git remote set-url origin "$gitUrl"

        echo $serviceName
        
        echo Generating python package
        mkdir -p "$serviceName"

        datamodel-codegen  --input "$SWAG_PATH" --input-file-type openapi --output "$serviceName"/model.py
        echo from "$serviceName".model import "*" > "$serviceName"/__init__.py
        
        git add "$serviceName"/model.py "$serviceName"/__init__.py
        git commit -m "chore(deps): upgrade $serviceName package -> v$testVersion"
        git push origin master
        
        rm /workspace/source/gittoken.gt
      workingDir: /workspace/source
  workspaces:
    - description: The git repo will be cloned onto the volume backing this workspace
      mountPath: /workspace
      name: output
