apiVersion: tekton.dev/v1beta1
kind: PipelineRun
metadata:
  creationTimestamp: null
  name: generate-test-packages
spec:
  pipelineSpec:
    tasks:
      - name: from-build-pack
        resources: {}
        taskSpec:
          metadata: {}
          stepTemplate:
            image: uses:jenkins-x/jx3-pipeline-catalog/tasks/go/pullrequest.yaml@versionStream
            name: ""
            resources:
              limits: {}
            workingDir: /workspace/source
            env:
              - name: SwaggerServiceName
                value: OpenAPIPkgGenerationMock
              - name: SpecPath
                value: /swagger.json
              - name: GIT_TOKEN
                valueFrom:
                  secretKeyRef:
                    name: openapi-pkg-gen
                    key: auth-token
              - name: GIT_USER
                valueFrom:
                  secretKeyRef:
                    name: openapi-pkg-gen
                    key: user
          steps:
            - image: uses:jenkins-x/jx3-pipeline-catalog/tasks/git-clone/git-clone-pr.yaml@versionStream
              name: ""
              resources: {}
            - image: ghcr.io/jenkins-x/jx-boot:3.2.197
              name: token-export
              resources: {}
              script: |
                #!/usr/bin/env sh
                jx gitops variables --commit=false
            - image: golang:1.24
              name: make-build
              resources: {}
              script: |
                #!/usr/bin/env bash
                source .jx/variables.sh
                make build
                mv ./build/jx3-openapi-generation ./mocks/jx3-openapi-generation
            - image: jx3mqubebuild.azurecr.io/spring-financial-group/jx3-openapi-generation:latest-preview
              name: test-package-generation
              imagePullPolicy: Always
              resources: {}
              script: |
                #!/bin/bash
                source /workspace/source/.jx/variables.sh
                
                git config --global --add user.name ${GIT_AUTHOR_NAME:-mqube-bot}
                git config --global --add user.email ${GIT_AUTHOR_EMAIL:-mqube-bot@mqube.com}
                
                cd ./mocks
                ./jx3-openapi-generation generate packages go python angular csharp java typescript rust
            - image: node:22-alpine
              name: validate-angular-build
              resources: {}
              script: |
                #!/bin/sh
                set -e
                echo "Validating Angular package build..."
                if [ -d "/tmp/packages/openapipkggenerationmock-angular" ]; then
                  cd "/tmp/packages/openapipkggenerationmock-angular"
                  npm install --legacy-peer-deps
                  npx ngc
                  echo "✅ Angular package builds successfully"
                else
                  echo "❌ Angular package directory not found"
                  exit 1
                fi
            - image: node:22-alpine
              name: validate-typescript-build
              resources: {}
              script: |
                #!/bin/sh
                set -e
                echo "Validating TypeScript package build..."
                if [ -d "/tmp/packages/openapipkggenerationmock-typescript" ]; then
                  cd "/tmp/packages/openapipkggenerationmock-typescript"
                  npm install
                  npm run build
                  echo "✅ TypeScript package builds successfully"
                else
                  echo "❌ TypeScript package directory not found"
                  exit 1
                fi
            - image: gradle:7.3.2-jdk17-alpine
              name: validate-java-build
              resources: {}
              script: |
                #!/bin/sh
                set -e
                echo "Validating Java package build..."
                if [ -d "/tmp/packages/mqube.openapipkggenerationmock" ]; then
                  cd "/tmp/packages/mqube.openapipkggenerationmock"
                  gradle build --no-daemon
                  echo "✅ Java package builds successfully"
                else
                  echo "❌ Java package directory not found"
                  exit 1
                fi
            - image: mcr.microsoft.com/dotnet/sdk:7.0-alpine
              name: validate-csharp-build
              resources: {}
              script: |
                #!/bin/sh
                set -e
                echo "Validating C# package build..."
                if [ -d "/tmp/packages/Mqube.OpenAPIPkgGenerationMock.Client" ]; then
                  cd "/tmp/packages/Mqube.OpenAPIPkgGenerationMock.Client"
                  dotnet restore
                  dotnet build --no-restore
                  echo "✅ C# package builds successfully"
                else
                  echo "❌ C# package directory not found"
                  exit 1
                fi
            - image: golang:1.24-alpine
              name: validate-go-build
              resources: {}
              script: |
                #!/bin/sh
                set -e
                echo "Validating Go package build..."
                if [ -d "/tmp/packages/mqube-go-packages/openapipkggenerationmock" ]; then
                  cd "/tmp/packages/mqube-go-packages/openapipkggenerationmock"
                  go mod download
                  go build ./...
                  echo "✅ Go package builds successfully"
                else
                  echo "❌ Go package directory not found"
                  exit 1
                fi
            - image: python:3.11-alpine
              name: validate-python-build
              resources: {}
              script: |
                #!/bin/sh
                set -e
                echo "Validating Python package build..."
                if [ -d "/tmp/packages/mqube-ml-doc-pipeline-schemas/openapi_pkg_generation_mock" ]; then
                  cd "/tmp/packages/mqube-ml-doc-pipeline-schemas/openapi_pkg_generation_mock"
                  apk add --no-cache build-base
                  pip install --no-cache-dir -e .
                  python -c "import openapi_pkg_generation_mock; print('Import successful')"
                  echo "✅ Python package builds successfully"
                else
                  echo "❌ Python package directory not found"
                  exit 1
                fi
            - image: rust:1.75-alpine
              name: validate-rust-build
              resources: {}
              script: |
                #!/bin/sh
                set -e
                echo "Validating Rust package build..."
                if [ -d "/tmp/packages/mqube-rust-packages/openapi-pkg-generation-mock" ]; then
                  cd "/tmp/packages/mqube-rust-packages/openapi-pkg-generation-mock"
                  apk add --no-cache musl-dev
                  cargo check
                  cargo build --release
                  echo "✅ Rust package builds successfully"
                else
                  echo "❌ Rust package directory not found"
                  exit 1
                fi
  podTemplate: {}
  serviceAccountName: tekton-bot
  timeout: 1h0m0s
status: {}
