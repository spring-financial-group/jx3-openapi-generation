// Code generated by mockery v2.15.0. DO NOT EDIT.

package mocks

import (
	fs "io/fs"

	mock "github.com/stretchr/testify/mock"
)

// FileIO is an autogenerated mock type for the FileIO type
type FileIO struct {
	mock.Mock
}

// Copy provides a mock function with given fields: src, dst
func (_m *FileIO) Copy(src string, dst string) (int64, error) {
	ret := _m.Called(src, dst)

	var r0 int64
	if rf, ok := ret.Get(0).(func(string, string) int64); ok {
		r0 = rf(src, dst)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(src, dst)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CopyManyToDir provides a mock function with given fields: dstDir, srcFiles
func (_m *FileIO) CopyManyToDir(dstDir string, srcFiles ...string) error {
	_va := make([]interface{}, len(srcFiles))
	for _i := range srcFiles {
		_va[_i] = srcFiles[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, dstDir)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, ...string) error); ok {
		r0 = rf(dstDir, srcFiles...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CopyToDir provides a mock function with given fields: srcPath, dstDir
func (_m *FileIO) CopyToDir(srcPath string, dstDir string) (int64, string, error) {
	ret := _m.Called(srcPath, dstDir)

	var r0 int64
	if rf, ok := ret.Get(0).(func(string, string) int64); ok {
		r0 = rf(srcPath, dstDir)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 string
	if rf, ok := ret.Get(1).(func(string, string) string); ok {
		r1 = rf(srcPath, dstDir)
	} else {
		r1 = ret.Get(1).(string)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(string, string) error); ok {
		r2 = rf(srcPath, dstDir)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// CopyToWorkingDir provides a mock function with given fields: srcPath
func (_m *FileIO) CopyToWorkingDir(srcPath string) (int64, error) {
	ret := _m.Called(srcPath)

	var r0 int64
	if rf, ok := ret.Get(0).(func(string) int64); ok {
		r0 = rf(srcPath)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(srcPath)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeferRemove provides a mock function with given fields: path
func (_m *FileIO) DeferRemove(path string) {
	_m.Called(path)
}

// Exists provides a mock function with given fields: path
func (_m *FileIO) Exists(path string) (bool, error) {
	ret := _m.Called(path)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(path)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(path)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MkTmpDir provides a mock function with given fields: prefix
func (_m *FileIO) MkTmpDir(prefix string) (string, error) {
	ret := _m.Called(prefix)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(prefix)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(prefix)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MkdirAll provides a mock function with given fields: path, perm
func (_m *FileIO) MkdirAll(path string, perm fs.FileMode) (string, error) {
	ret := _m.Called(path, perm)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, fs.FileMode) string); ok {
		r0 = rf(path, perm)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, fs.FileMode) error); ok {
		r1 = rf(path, perm)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Move provides a mock function with given fields: src, dst
func (_m *FileIO) Move(src string, dst string) error {
	ret := _m.Called(src, dst)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(src, dst)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Read provides a mock function with given fields: path
func (_m *FileIO) Read(path string) ([]byte, error) {
	ret := _m.Called(path)

	var r0 []byte
	if rf, ok := ret.Get(0).(func(string) []byte); ok {
		r0 = rf(path)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(path)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Remove provides a mock function with given fields: path
func (_m *FileIO) Remove(path string) error {
	ret := _m.Called(path)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(path)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ReplaceInFile provides a mock function with given fields: path, old, new
func (_m *FileIO) ReplaceInFile(path string, old string, new string) error {
	ret := _m.Called(path, old, new)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string) error); ok {
		r0 = rf(path, old, new)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Write provides a mock function with given fields: path, data, perm
func (_m *FileIO) Write(path string, data []byte, perm fs.FileMode) error {
	ret := _m.Called(path, data, perm)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, []byte, fs.FileMode) error); ok {
		r0 = rf(path, data, perm)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewFileIO interface {
	mock.TestingT
	Cleanup(func())
}

// NewFileIO creates a new instance of FileIO. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewFileIO(t mockConstructorTestingTNewFileIO) *FileIO {
	mock := &FileIO{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
