// Code generated by mockery v2.15.0. DO NOT EDIT.

package mocks

import (
	domain "spring-financial-group/jx3-openapi-generation/pkg/domain"

	mock "github.com/stretchr/testify/mock"
)

// PackageGeneratorFactory is an autogenerated mock type for the PackageGeneratorFactory type
type PackageGeneratorFactory struct {
	mock.Mock
}

// NewGenerator provides a mock function with given fields: language
func (_m *PackageGeneratorFactory) NewGenerator(language string) (domain.PackageGenerator, error) {
	ret := _m.Called(language)

	var r0 domain.PackageGenerator
	if rf, ok := ret.Get(0).(func(string) domain.PackageGenerator); ok {
		r0 = rf(language)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(domain.PackageGenerator)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(language)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewPackageGeneratorFactory interface {
	mock.TestingT
	Cleanup(func())
}

// NewPackageGeneratorFactory creates a new instance of PackageGeneratorFactory. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewPackageGeneratorFactory(t mockConstructorTestingTNewPackageGeneratorFactory) *PackageGeneratorFactory {
	mock := &PackageGeneratorFactory{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
