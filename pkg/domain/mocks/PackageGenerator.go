// Code generated by mockery v2.15.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// PackageGenerator is an autogenerated mock type for the PackageGenerator type
type PackageGenerator struct {
	mock.Mock
}

// GeneratePackage provides a mock function with given fields: specificationPath, outputDir
func (_m *PackageGenerator) GeneratePackage(specificationPath string, outputDir string) (string, error) {
	ret := _m.Called(specificationPath, outputDir)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, string) string); ok {
		r0 = rf(specificationPath, outputDir)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(specificationPath, outputDir)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPackageName provides a mock function with given fields:
func (_m *PackageGenerator) GetPackageName() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// PushPackage provides a mock function with given fields: packageDir
func (_m *PackageGenerator) PushPackage(packageDir string) error {
	ret := _m.Called(packageDir)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(packageDir)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewPackageGenerator interface {
	mock.TestingT
	Cleanup(func())
}

// NewPackageGenerator creates a new instance of PackageGenerator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewPackageGenerator(t mockConstructorTestingTNewPackageGenerator) *PackageGenerator {
	mock := &PackageGenerator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
