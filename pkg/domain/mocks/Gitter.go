// Code generated by mockery v2.15.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// Gitter is an autogenerated mock type for the Gitter type
type Gitter struct {
	mock.Mock
}

// AddFiles provides a mock function with given fields: dir, paths
func (_m *Gitter) AddFiles(dir string, paths ...string) error {
	_va := make([]interface{}, len(paths))
	for _i := range paths {
		_va[_i] = paths[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, dir)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, ...string) error); ok {
		r0 = rf(dir, paths...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CheckoutBranch provides a mock function with given fields: dir, branchName
func (_m *Gitter) CheckoutBranch(dir string, branchName string) error {
	ret := _m.Called(dir, branchName)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(dir, branchName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Clone provides a mock function with given fields: dir, repositoryURL
func (_m *Gitter) Clone(dir string, repositoryURL string) (string, error) {
	ret := _m.Called(dir, repositoryURL)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, string) string); ok {
		r0 = rf(dir, repositoryURL)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(dir, repositoryURL)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Commit provides a mock function with given fields: dir, message
func (_m *Gitter) Commit(dir string, message string) error {
	ret := _m.Called(dir, message)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(dir, message)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetCurrentBranch provides a mock function with given fields: dir
func (_m *Gitter) GetCurrentBranch(dir string) (string, error) {
	ret := _m.Called(dir)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(dir)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(dir)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDefaultBranchName provides a mock function with given fields: dir
func (_m *Gitter) GetDefaultBranchName(dir string) (string, error) {
	ret := _m.Called(dir)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(dir)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(dir)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Push provides a mock function with given fields: dir, branch
func (_m *Gitter) Push(dir string, branch string) error {
	ret := _m.Called(dir, branch)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(dir, branch)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetRemote provides a mock function with given fields: dir, repositoryURL
func (_m *Gitter) SetRemote(dir string, repositoryURL string) error {
	ret := _m.Called(dir, repositoryURL)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(dir, repositoryURL)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewGitter interface {
	mock.TestingT
	Cleanup(func())
}

// NewGitter creates a new instance of Gitter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewGitter(t mockConstructorTestingTNewGitter) *Gitter {
	mock := &Gitter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
